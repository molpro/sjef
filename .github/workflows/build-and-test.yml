name: Build and test

on:
  push:
    branches: [ "main" , "master", "new-build" ]
  pull_request:
    branches: [ "main" , "master" ]
  workflow_dispatch:

env:
  CMAKE_BUILD_TYPE: Release

jobs:

  cmake-build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
#    permissions:
#      contents: read
#      packages: write
    container:
      # relies on repository name being all lower case
      image: ghcr.io/${{ github.repository }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: Check existence of build configuration file
        id: check_configuration
        uses: andstor/file-existence-action@v1
        with:
          files: "CMakeLists.txt"

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Configure CMake
        if: steps.check_configuration.outputs.files_exists == 'true'
        run: |
          git config --global --add safe.directory /__w/sjef/sjef
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.CMAKE_BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache  --log-level=DEBUG

      - name: Build
        if: steps.check_configuration.outputs.files_exists == 'true'
        run: cmake --build ${{github.workspace}}/build --config ${{env.CMAKE_BUILD_TYPE}}

      - name: Test
        if: steps.check_configuration.outputs.files_exists == 'true'
        run: |
          service ssh restart
          service ssh status
          ssh localhost hostname || ssh -v localhost hostname
          cd ${{github.workspace}}/build && ctest -C ${{env.CMAKE_BUILD_TYPE}} || ctest -C ${{env.CMAKE_BUILD_TYPE}} -V --rerun-failed --output-on-failure

      - name: Build doxygen
        run: cmake --build ${{github.workspace}}/build --target sjef-doc

  old-python:
    if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
#    permissions:
#      contents: read
#      packages: write
    container:
      # relies on repository name being all lower case
      image: ghcr.io/${{ github.repository }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 5
    env:
      CXXFLAGS: -fPIC
    steps:
      - uses: actions/checkout@v3

#      - name: Check existence of build configuration file
#        id: check_configuration
#        uses: andstor/file-existence-action@v1
#        with:
#          files: "pysjef/build.sh"

      - name: Build
        run: |
          . /opt/conda/etc/profile.d/conda.sh
          mkdir -p /var/run/sshd
          /usr/sbin/sshd
          cd pysjef
          conda install -c conda-forge -y --file requirements.txt
          BUILD=cmake-build-$(uname)-$(uname -m)
          cmake -S .. -B $BUILD -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DBUILD_TESTS=OFF -DBUILD_PROGRAM=OFF || { echo 'cmake configuration failed' ; exit 1; }
          cmake --build $BUILD -t install || { echo 'cmake install failed' ; exit 1; }
          python -m pip install .
      - name: Test
        run: pytest
  python:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, ubuntu-24.04-arm ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true

      - name: Environment
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          conda activate test
          echo "CMAKE_INSTALL_PREFIX=${CONDA_PREFIX}" >> "$GITHUB_ENV"
          echo "CMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX"
          echo "CXXFLAGS=-fPIC" >> "$GITHUB_ENV"
      - name: Environment
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          conda activate test
          $CMAKE_INSTALL_PREFIX = $Env:CONDA_PREFIX -replace '\\','/'
          echo "CMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX"
          echo ('$Env:CMAKE_INSTALL_PREFIX = {0}' -f $CMAKE_INSTALL_PREFIX) >> "$GITHUB_ENV"
      - name: Conda install
        shell: pwsh
        run: |
          conda activate test
          conda install -q -c conda-forge -y --file pysjef/requirements.txt
          conda info
          conda list
          echo CMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX
          echo CMAKE_INSTALL_PREFIX=$Env:CMAKE_INSTALL_PREFIX
          cmake -LAH -S . -B cmake-build -DBUILD_TESTS=OFF -DBUILD_PROGRAM=OFF -DBUILD_DOCUMENTATION=OFF
          cmake --build cmake-build -t install --config Release
          python -m pip install ./pysjef
      - name: Minimal test
        shell: cmd
        run: |
          python -c "import pysjef; p=pysjef.Project('test.molpro'); print(p); print(pysjef.__version__);print(p.filename())"
      - name: Pytest
        if: ${{ matrix.os != 'windows-latest' }}
        run: pytest

